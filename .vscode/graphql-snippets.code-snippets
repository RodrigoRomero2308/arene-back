{
	// Place your arene-back workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"resolver": {
		"scope": "typescript",
		"prefix": "resolver",
		"description": "Adds a method to a resolver class",
		"body": [
			"@${1:Query}(() => ${2:ReturnType})",
			"@UseGuards(IsAuthenticatedGuard)",
			"async ${3:methodName}(@CurrentUser() user: AuthenticatedUser) {",
			"// put code in here",
			"}",
		]
	},
	"current-user": {
		"scope": "typescript",
		"prefix": "current-user",
		"description": "Adds a parameter to a resolver class's method to get the logged in user. Must be used with IsAuthenticatedGuard",
		"body": [
			"@CurrentUser() user: AuthenticatedUser",
			"$0"
		]
	},
	"field": {
		"scope": "typescript",
		"prefix": "field",
		"description": "Adds a not nullable field to an object or input type",
		"body": [
			"@Field(() => ${3:${2:Type}})",
  		"${1:fieldName}: ${2:Type};",
			"$0"
		]
	},
	"field-nullable": {
		"scope": "typescript",
		"prefix": "field-nullable",
		"description": "Adds a nullable field to an object or input type",
		"body": [
			"@Field(() => ${3:${2:Type}}, {nullable: true})",
  		"${1:fieldName}?: ${2:Type} | null;",
			"$0"
		]
	},
}